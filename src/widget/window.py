from typing import Optional
from gi.repository import Gtk
from widget.widget import Widget
from widget.layer_shell import LayerShellLayer, LayerShellEdge
from gi.repository import Gtk4LayerShell


class Window(Gtk.Window, Widget):
    """
    A toplevel window which can contain other widgets.
    """

    layer_shell: bool = True
    """
    Whether or not to use Gtk Layer Shell.
    """

    layer: LayerShellLayer = LayerShellLayer.TOP
    """
    The layer shell layer of which this window will exist on
    """

    anchor: LayerShellEdge = LayerShellEdge.TOP
    """
    The anchor of the Window (Whether the window should be anchored to an edge)
    """

    auto_exclusive_zone: bool = True
    """
    Whether or not an auto-exclusive zone should be automatically set by gtk4-layer-shell.
    """

    child: Widget
    """
    The sole child of this window.
    """

    # We don't use the method of having both class variables
    # and __init__ here since Window should not be initialised outside
    # of the Borealis instance.
    def __init__(self, app: Gtk.Application, **kwargs):
        """
        Initialises this window, along with all the associated
        LayerShell things and presents the window.

        This should occur after the activate event of the Gtk Application.

        Args:
            app (Gtk.Application): The application to associate this window with.
        """
        Gtk.Window.__init__(self, application=app)
        Widget.__init__(self, **kwargs)

        # Set LayerShell properties
        if self.layer_shell:
            Gtk4LayerShell.init_for_window(self)
            self.b_set_layer(self.layer)
            self.b_set_anchor(self.anchor)
            self.b_set_auto_exclusive_zone(self.auto_exclusive_zone)

        self.b_set_child(self.child)

        # Present our window
        self.present()

    def b_set_layer(self, layer: LayerShellLayer):
        """
        Set's the gtk4-layer-shell layer this window
        is on.

        Args:
            layer (Gtk4LayerShell.Layer): The new layer to be on.
        """
        Gtk4LayerShell.set_layer(self, layer.value)

    def b_set_anchor(self, edge: LayerShellEdge):
        """
        Set's the gtk4-layer-shell anchor this window
        is anchored to

        Args:
            edge (LayerShellEdge): The new anchor
        """
        Gtk4LayerShell.set_anchor(self, edge.value, True)

    def b_set_auto_exclusive_zone(self, auto_exclusive_zone: bool):
        """
        Set's if there should be an auto-exclusive-zone around
        the window generated by gtk4-layer-shell.

        Args:
            auto_exclusive_zone (bool): True if there should be, else no.
        """
        if auto_exclusive_zone is True:
            Gtk4LayerShell.auto_exclusive_zone_enable(self)
        else:
            Gtk4LayerShell.set_exclusive_zone(self, auto_exclusive_zone)

    def b_set_child(self, child: Optional[Widget]):
        """
        Set's the child of this window to a new child

        Args:
            child (Optional[Widget]): The new child of this window
        """
        self.child = child._reinitialise_widget()
        self.set_child(self.child)
